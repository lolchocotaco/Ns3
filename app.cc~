class App: public Application{
    private:
        bool isRunning; 
        DataRate dataRate;
        uint32_t numPacketSent;
        uint32_t numPackets;
        uint32_t packetSize;
        Ptr<Socket> socket;
        Address peer;
        EventId sendEvent;

        void StartApplication(void);
        void StopApplication(void);

        void ScheduleTx();
        void sendPacket();
    public:
        App();
        virtual ~App();        
        void Setup(Ptr<Socket> s, Address a, uint32_t ps, uint32_t np, DataRate dr);
        void ChangeRate( DataRate newRate);
};


App::App() :
    socket(0),
    dataRate(0),
    numPacketSent(0),
    numPacket(0),
    packetSize(0),
    socket(0),
    peer(),
    sendEvent(),
    isRunning(false)
{
}

App:: ~App(){
    socket = 0;
}

void App::Setup (Ptr<Socket> s, Address a, uint32_t ps, uint32_t np, DataRate dr){
    socket = s;
    address = a;
    packetSize = ps;
    numPackets = np;
    DataRate = dr;
}

void App::StartApplication(){
    isRunning=true;
    numPacketSent = 0;
    socket->Bind ();
    socket->Connect(peer);
    SendPacket();
}

void App::StopApplication(void){
    isRunning = false;
    if(sendEvent.IsRunning() ){
        Simulator::Cancel(sendEvent);
    }
    if(socket){
        socket->Close();
    }
}

void App::SendPacket(void){
    Ptr<Packet> packet= Create<Packet>(packetSize);
    socket->Send(packet);
    if(++numPacketSent<numPackets){
        ScheduleTx();
    }

}

void App::ScheduleTx(){
    if(isRunning){
        Time tNext (Seconds( packetSize *8 / static_cast<double> (dataRate.GetBitRate() ) ) ) ;
        sendEvent = Simulator::Schedule(tNext,&App::SendPacket, this);
    }
}

void App::ChangeRate(DataRate newRate){
    dataRate = newRate
    return;
}


