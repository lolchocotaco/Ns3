/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include <iostream>
#include "app.cc"
#include <string>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("Proj 2");

//Functions that will be used later

static void CwndChange(uint32_t oldCwnd, uint32_t newCwnd){
  std::cout <<Simulator::Now().GetSeconds <<"\t" <<newCwnd << std::endl;
}

void IncRate(Ptr<App> app, DataRate rate){
  app->ChangeRate(rate);
  return;
}




int main (int argc, char *argv[])
{

    // Set up Variables
//     double latency = 2.0; // 2ms daly
//     uint64_t dataRate = 5000000; //5Mbps data rate
//     double interval = 0.02;   //Inter Packet Arrival Time

    std::string lat = "2ms"
    std::string rate= "500kb/s"	
    bool enableFlowMonitor = false

    /******** Command Line ********/
    CommandLine cmd;
    cmd.AddValue("latency", "P2P link Latency in Milliseconds",latency);
    cmd.Parse(argc,argv);
    /*******************************************/


    //Create Nodes
    //Nodes 4 and 5 are the bridging Nodees
    NodeContainer nodes;
    nodes.Create (6);

    //Left side
    NodeContainer left1 = NodeContainer( nodes.Get(0), nodes.Get(4));
    NodeContainer left2 = NodeContainer( nodes.Get(1), nodes.Get(4));
    //Right side
    NodeContainer right1 = NodeContainer( nodes.Get(2), nodes.Get(5));
    NodeContainer right2 = NodeContainer( nodes.Get(3), nodes.Get(5));
    //Bridge
    NodeContainer bridge = NodeContainer(nodes.Get(4), nodes.Get(5));


    //Stack
    InternetStackHelper stack;
    stack.Install (nodes);


    //Create Channels for each connection
    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute ("DataRate",DataRateValue( DataRate (dataRate) ));
    pointToPoint.SetChannelAttribute ("Delay", TimeValue( MilliSeconds (latency) ));

    NetDeviceContainer devLeft1 = pointToPoint.Install (left1);
    NetDeviceContainer devLeft2 = pointToPoint.Install (left2);
    NetDeviceContainer devRight1= pointToPoint.Install (right1);
    NetDeviceContainer devRight2= pointToPoint.Install (right2);
    NetDeviceContainer devBridge= pointToPoint.Install (bridge);
    

    //Give everyone IP Addresses. Each connection wiill have a different Subnet
    Ipv4AddressHelper ipAdd;
    ipAdd.SetBase ("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer iLeft1 = ipAdd.Assign (devLeft1);

    ipAdd.SetBase("10.1.2.0", "255.255.255.0");
    Ipv4InterfaceContainer iLeft2 = ipAdd.Assign (devLeft2);

    ipAdd.SetBase("10.1.3.0", "255.255.255.0");
    Ipv4InterfaceContainer iBridge = ipAdd.Assign(devBridge);

    ipAdd.SetBase("10.1.4.0", "255.255.255.0");
    Ipv4InterfaceContainer iRight1 = ipAdd.Assign(devRight1);

    ipAdd.SetBase("10.1.5.0", "255.255.255.0");
    Ipv4InterfaceContainer iRight2 = ipAdd.Assign(devRight2);

    Ipv4GlobalRoutingHelper::PopulateRoutingTables(); // For more than a single link


    //TCP Connection
    uint16_t destPort = 8080;
    Address destAddress (InetSocketAddress(iRight1.GetAddress(0), destPort)); //interface of n2
    PacketSinkHelper packetSinkHelper ("ns3::TcpSocketFactory", InetSocketAddress (Ipv4Address::GetAny(),destPort));
    ApplicationContainer destApps = packetSinkhelper.Install(nodes.get(2));
    destApps.Start(Seconds (0.));
    destApps.Stop(Seconds(100.));
    
    //Source is at Node 0
    Ptr<Socket> ns3TcpSocket = Socket::CreateSocket (nodes.Get (0), TcpSocketFactory::GetTypeId ());
    
    // Trace Congestion window
    ns3TcpSocket->TraceConnectWithoutContext ("CongestionWindow", MakeCallback (&CwndChange));
    
    //Create TCP application at Node 0
    Ptr<App> app = CreateObject<App> ();
    app->Setup (ns3TcpSocket, sinkAddress, 1040, 100000, DataRate ("250Kbps"));
    node.Get (0)->AddApplication (app);
    app->SetStartTime (Seconds (1.));
    app->SetStopTime (Seconds (100.));

    //UDP connection from N1 to N3
    uint16_t destPort2 = 6;
    Address destAddress2 (InetSocketAddress (iRight2.GetAddress (0), destPort2)); // interface of n3
    PacketSinkHelper packetSinkHelper2 ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), destPort2));
    ApplicationContainer destApps2 = packetSinkHelper2.Install (nodes.Get (3)); //n3 as destination
    destApps2.Start (Seconds (0.));
    destApps2.Stop (Seconds (100.));
    
    Ptr<Socket> ns3UdpSocket = Socket::CreateSocket (nodes.Get (1), UdpSocketFactory::GetTypeId ()); //source at Node 1
    
     // Create UDP application at n1
    Ptr<App> app2 = CreateObject<App> ();
    app2->Setup (ns3UdpSocket, destAddress2, 1040, 100000, DataRate ("250Kbps"));
    nodes.Get (1)->AddApplication (app2);
    app2->SetStartTime (Seconds (20.));
    app2->SetStopTime (Seconds (100.));

    // Increase UDP Rate
    Simulator::Schedule (Seconds(30.0), &IncRate, app2, DataRate("500kbps"));
    
    //Create Applications 
    //nodes.Get(1) == Server
    uint16_t port1 = 9;
    uint16_t port2 = 80;
    UdpEchoServerHelper echoServer (port1);
    UdpEchoServerHelper echoServer2 (port2);

    ApplicationContainer serverApps;
    serverApps = echoServer.Install (nodes.Get(1));    
    serverApps = echoServer2.Install(nodes.Get(1));
    serverApps.Start (Seconds (1.0));
    serverApps.Stop (Seconds (12.0));


    Simulator::Stop (Seconds(100.0));
    Simulator::Run ();
    if (enableFlowMonitor)
      {
	    flowmon->CheckForLostPackets ();
	    flowmon->SerializeToXmlFile("lab2Res/lab-2.flowmon", true, true);
      }
    Simulator::Destroy ();
    return 0;
    
    
    

//     //Client application to send from node 0 to 1
//     uint32_t maxPacketSize = 1024;
//     Time interPacketTime = Seconds(interval);
//     uint32_t maxPacketCount = 5;
// 
//     UdpEchoClientHelper echoClient (interfaces.GetAddress (1), port1);
//     UdpEchoClientHelper echoClient2 (interfaces.GetAddress (1), port2);
// 
//     echoClient.SetAttribute ("MaxPackets", UintegerValue (maxPacketCount));
//     echoClient.SetAttribute ("Interval", TimeValue (interPacketTime));
//     echoClient.SetAttribute ("PacketSize", UintegerValue (maxPacketSize));
// 
//     echoClient2.SetAttribute ("MaxPackets", UintegerValue (maxPacketCount));
//     echoClient2.SetAttribute ("Interval", TimeValue (interPacketTime));
//     echoClient2.SetAttribute ("PacketSize", UintegerValue (maxPacketSize));
// 
//     ApplicationContainer clientApps;
//     clientApps = echoClient.Install (nodes.Get (0));
//     clientApps = echoClient2.Install(nodes.Get (0));
//     clientApps.Start (Seconds (1.0));
//     clientApps.Stop (Seconds (11.0));
// 
//     //Tracing Probably not needed
//     AsciiTraceHelper ascii;
//     pointToPoint.EnableAscii(ascii.CreateFileStream ("./scratch/lab1Res/lab1Trace.tr") ,devices);
//     pointToPoint.EnablePcap("proj1",devices,false);
// 
//     //Calculating ThroughPut
//     FlowMonitorHelper flowmon;
//     Ptr<FlowMonitor> monitor = flowmon.InstallAll();
// 
// 
// 
//     std::cout<<"======LATENCY ="<<latency<<"=========="<<std::endl;
// 
//     Simulator::Stop (Seconds(12.0));
//     Simulator::Run ();
//     
//     monitor->CheckForLostPackets ();
// 
//     Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());
//     std::map<FlowId, FlowMonitor::FlowStats> stats = monitor->GetFlowStats ();
//     for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator i = stats.begin (); i != stats.end (); ++i){
//         Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (i->first);
//         if ((t.sourceAddress=="10.1.1.1" && t.destinationAddress == "10.1.1.2")){
//             std::cout << "Flow " << i->first  << " (" << t.sourceAddress << " -> " << t.destinationAddress << ")\n";
//             std::cout << "  Tx Bytes:   " << i->second.txBytes << "\n";
//             std::cout << "  Rx Bytes:   " << i->second.rxBytes << "\n";
//             std::cout << "  Throughput: " << i->second.rxBytes * 8.0 / (i->second.timeLastRxPacket.GetSeconds() - i->second.timeFirstTxPacket.GetSeconds())/1024/1024  << " Mbps\n";
//         }
//     }
// 
//     monitor->SerializeToXmlFile("./scratch/lab1Res/lab1.flowmon", true, true);
//     Simulator::Destroy ();
//     return 0;
}
